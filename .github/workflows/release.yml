name: Release Extension

on:
  push:
    branches:
      - main

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, ':release')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install dependencies
      run: npm install

    - name: Compile TypeScript
      run: npm run compile

    - name: Install vsce globally
      run: npm install -g @vscode/vsce

    - name: Get version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build VSIX package
      if: steps.check_tag.outputs.exists == 'false'
      run: vsce package

    - name: Create git tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
        git push origin "${{ steps.version.outputs.tag }}"

    - name: Extract changelog for version
      if: steps.check_tag.outputs.exists == 'false'
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"

        # Extract changelog section for this version
        CHANGELOG_SECTION=$(awk "
          /^## \[$VERSION\]/ { found=1; next }
          /^## \[/ && found { exit }
          found && /^###/ { print \$0; next }
          found && /^-/ { print \$0; next }
          found && NF > 0 { print \$0 }
        " changelog.md)

        if [ -z "$CHANGELOG_SECTION" ]; then
          # If no specific changelog, get latest commits
          CHANGELOG_SECTION="## What's Changed

        $(git log --pretty=format:"- %s" HEAD~5..HEAD)

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD~1)...${{ steps.version.outputs.tag }}"
        fi

        # Save to file for GitHub release
        echo "$CHANGELOG_SECTION" > release_notes.md

    - name: Create GitHub Release
      if: steps.check_tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: DevMirror ${{ steps.version.outputs.tag }}
        body_path: release_notes.md
        files: ./devmirror-${{ steps.version.outputs.version }}.vsix
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Success notification
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        echo "‚úÖ Successfully released DevMirror ${{ steps.version.outputs.tag }}"
        echo "üì¶ Download: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"

    - name: Already released notification
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "‚ÑπÔ∏è Version ${{ steps.version.outputs.tag }} has already been released"
        echo "üì¶ View release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"